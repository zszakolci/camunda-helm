---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-keycloak
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 22.0.3
    helm.sh/chart: keycloak-16.1.7
    app.kubernetes.io/component: keycloak
automountServiceAccountToken: true
---
# Source: camunda-platform/charts/identity/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
---
# Source: camunda-platform/templates/operate/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: operate
---
# Source: camunda-platform/templates/optimize/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: optimize
---
# Source: camunda-platform/templates/tasklist/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: tasklist
---
# Source: camunda-platform/templates/web-modeler/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-web-modeler
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: web-modeler
---
# Source: camunda-platform/templates/zeebe-gateway/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: zeebe-gateway
---
# Source: camunda-platform/templates/zeebe/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: zeebe-broker
---
# Source: camunda-platform/charts/identity/charts/keycloak/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dev-postgresql
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.9
type: Opaque
data:
  postgres-password: "YWRtaW4="
  password: "YWRtaW4="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dev-keycloak
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 22.0.3
    helm.sh/chart: keycloak-16.1.7
    app.kubernetes.io/component: keycloak
type: Opaque
data:
  admin-password: "YWRtaW4="
---
# Source: camunda-platform/charts/identity/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dev-identity-postgresql
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: identity-postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
type: Opaque
data:
  postgres-password: "M1VBVFlVbThMbw=="
  password: "NVVMNmtzdVNSRg=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: camunda-platform/charts/identity/templates/connectors-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "dev-connectors-identity-secret"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
type: Opaque
data:
  connectors-secret: "Y29ubmVjdG9yc1NlY3JldA=="
---
# Source: camunda-platform/charts/identity/templates/console-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "dev-console-identity-secret"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
type: Opaque
data:
  console-secret: "Y29uc29sZVNlY3JldA=="
---
# Source: camunda-platform/charts/identity/templates/operate-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "dev-operate-identity-secret"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
type: Opaque
data:
  operate-secret: "b3BlcmF0ZVNlY3JldA=="
---
# Source: camunda-platform/charts/identity/templates/optimize-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "dev-optimize-identity-secret"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
type: Opaque
data:
  optimize-secret: "b3B0aW1pemVTZWNyZXQ="
---
# Source: camunda-platform/charts/identity/templates/tasklist-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "dev-tasklist-identity-secret"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
type: Opaque
data:
  tasklist-secret: "dGFza2xpc3RTZWNyZXQ="
---
# Source: camunda-platform/charts/identity/templates/zeebe-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "dev-zeebe-identity-secret"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
type: Opaque
data:
  zeebe-secret: "emVlYmVTZWNyZXQ="
---
# Source: camunda-platform/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dev-postgresql-web-modeler
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: postgresql-web-modeler
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "14.5.0"
type: Opaque
data:
  postgres-password: "YWRtaW4="
  password: "YWRtaW4="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: camunda-platform/templates/web-modeler/secret-restapi.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dev-web-modeler-restapi
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: restapi
  annotations:
    {}
type: Opaque
data:
  smtp-password: ZmFrZXBhc3N3b3Jk
---
# Source: camunda-platform/templates/web-modeler/secret-shared.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dev-web-modeler
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: web-modeler
  annotations:
    {}
type: Opaque
data:
  pusher-app-secret: Qk9jWFVMdmJBajZvYmIyS2pWYkk=
---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/configmap-env-vars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-keycloak-env-vars
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 22.0.3
    helm.sh/chart: keycloak-16.1.7
    app.kubernetes.io/component: keycloak
data:
  KEYCLOAK_ADMIN: "admin"
  KEYCLOAK_HTTP_PORT: "8080"
  KEYCLOAK_PROXY: "edge"
  KEYCLOAK_ENABLE_STATISTICS: "false"
  KEYCLOAK_DATABASE_HOST: "dev-postgresql"
  KEYCLOAK_DATABASE_PORT: "5432"
  KEYCLOAK_DATABASE_NAME: "bitnami_keycloak"
  KEYCLOAK_DATABASE_USER: "bn_keycloak"
  KEYCLOAK_PRODUCTION:  "false"
  KEYCLOAK_ENABLE_HTTPS: "false"
  KEYCLOAK_CACHE_TYPE: "ispn"
  KEYCLOAK_CACHE_STACK: "kubernetes"
  JAVA_OPTS_APPEND: "-Djgroups.dns.query=dev-keycloak-headless.camunda.svc.cluster.local"
  KEYCLOAK_LOG_OUTPUT: "default"
  KC_LOG_LEVEL: "INFO"
---
# Source: camunda-platform/charts/identity/templates/configmap-env-vars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-identity-env-vars
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
  annotations:
    {}
data:
  MULTITENANCY_ENABLED: "true"
  IDENTITY_DATABASE_HOST: "dev-identity-postgresql"
  IDENTITY_DATABASE_PORT: "5432"
  IDENTITY_DATABASE_NAME: "identity"
  IDENTITY_DATABASE_USERNAME: "identity"
---
# Source: camunda-platform/templates/operate/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: operate
data:
  application.yml: |
    # Operate configuration file
    camunda.operate:
      # ELS instance to store Operate data
      elasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: dev-elasticsearch
        # Transport port
        port: 9200
      # Zeebe instance
      zeebe:
        # Broker contact point
        brokerContactPoint: "dev-zeebe-gateway:26500"
      # ELS instance to export Zeebe data to
      zeebeElasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: dev-elasticsearch
        # Transport port
        port: 9200
        # Index prefix, configured in Zeebe Elasticsearch exporter
        prefix: zeebe-record
    logging:
      level:
        ROOT: INFO
        io.camunda.operate: DEBUG
    #Spring Boot Actuator endpoints to be exposed
    management.endpoints.web.exposure.include: health,info,conditions,configprops,prometheus,loggers,usage-metrics,backups
---
# Source: camunda-platform/templates/release-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-camunda-platform-release
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
  annotations:
    {}
data:
  
  info: |
    - name: dev
      namespace: camunda
      version: 8.3.2
      components:
      - name: Keycloak
        url: https://connector.local.distro.ultrawombat.com/auth
      - name: Identity
        url: https://connector.local.distro.ultrawombat.com
        readiness: http://dev-identity.camunda:80/actuator/health
    
      - name: Operate
        url: https://connector.local.distro.ultrawombat.com
        readiness: http://dev-operate.camunda:80/actuator/health/readiness
    
      - name: Optimize
        url: https://connector.local.distro.ultrawombat.com
        readiness: http://dev-optimize.camunda:80/api/readyz
    
      - name: Tasklist
        url: https://connector.local.distro.ultrawombat.com
        readiness: http://dev-tasklist.camunda:80/actuator/health/readiness
      - name: WebModeler WebApp
        url: https://connector.local.distro.ultrawombat.com
        readiness: http://dev-web-modeler-webapp.camunda:80/health/readiness
    
      - name: Zeebe Gateway
        url: grpc://zeebe-gateway.local.distro.ultrawombat.com
        readiness: http://dev-zeebe-gateway.camunda:9600/actuator/health/readiness
---
# Source: camunda-platform/templates/tasklist/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: tasklist
data:
  application.yml: |
    # Tasklist configuration file
    camunda.tasklist:
      # Set Tasklist username and password.
      # If user with <username> does not exists it will be created.
      # Default: demo/demo
      #username:
      #password:
      # ELS instance to store Tasklist data
      elasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: dev-elasticsearch
        # Transport port
        port: 9200
      # Zeebe instance
      zeebe:
        # Broker contact point
        brokerContactPoint: "dev-zeebe-gateway:26500"
      # ELS instance to export Zeebe data to
      zeebeElasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: dev-elasticsearch
        # Transport port
        port: 9200
        # Index prefix, configured in Zeebe Elasticsearch exporter
        prefix: zeebe-record
    #Spring Boot Actuator endpoints to be exposed
    management.endpoints.web.exposure.include: health,info,conditions,configprops,prometheus,loggers,usage-metrics,backups
    # Enable or disable metrics
    #management.metrics.export.prometheus.enabled: false
---
# Source: camunda-platform/templates/web-modeler/configmap-shared.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-web-modeler
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: web-modeler
  annotations:
    {}
data:
  pusher-app-id: web-modeler
  pusher-app-key: 0PA1OO33ESWiCKJvRGjg
---
# Source: camunda-platform/templates/zeebe-gateway/configmap.yaml
kind: ConfigMap
metadata:
  name: dev-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: zeebe-gateway
apiVersion: v1
data:
  gateway-log4j2.xml: |
---
# Source: camunda-platform/templates/zeebe/configmap.yaml
kind: ConfigMap
metadata:
  name: dev-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: zeebe-broker
apiVersion: v1
data:
  startup.sh: |
    #!/usr/bin/env bash
    set -eux -o pipefail
    export ZEEBE_BROKER_CLUSTER_NODEID=${ZEEBE_BROKER_CLUSTER_NODEID:-$[${K8S_NAME##*-} * 1 + 0]}

    if [ "$(ls -A /exporters/)" ]; then
      mkdir /usr/local/zeebe/exporters/
      cp -a /exporters/*.jar /usr/local/zeebe/exporters/
    else
      echo "No exporters available."
    fi
    exec /usr/local/zeebe/bin/broker

  broker-log4j2.xml: |
---
# Source: camunda-platform/charts/elasticsearch/templates/master/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-elasticsearch-master-hl
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.11.0
    helm.sh/chart: elasticsearch-19.13.9
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: camunda-platform/charts/elasticsearch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-elasticsearch
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.11.0
    helm.sh/chart: elasticsearch-19.13.9
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
      nodePort: null
    - name: tcp-transport
      port: 9300
      nodePort: null
  selector:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: camunda-platform/charts/identity/charts/keycloak/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-postgresql-hl
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.9
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/charts/identity/charts/keycloak/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-postgresql
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.9
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-keycloak-headless
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 22.0.3
    helm.sh/chart: keycloak-16.1.7
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/component: keycloak
---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-keycloak
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 22.0.3
    helm.sh/chart: keycloak-16.1.7
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/component: keycloak
---
# Source: camunda-platform/charts/identity/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-identity-postgresql-hl
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: identity-postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/name: identity-postgresql
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/charts/identity/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-identity-postgresql
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: identity-postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/name: identity-postgresql
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/charts/identity/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8080
      protocol: TCP
    - port: 82
      name: metrics
      targetPort: 8082
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: identity
---
# Source: camunda-platform/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-postgresql-web-modeler-hl
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: postgresql-web-modeler
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "14.5.0"
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql-web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-postgresql-web-modeler
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: postgresql-web-modeler
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "14.5.0"
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql-web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/templates/connectors/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-connectors
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: connectors
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: connectors
---
# Source: camunda-platform/templates/operate/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: operate
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: operate
---
# Source: camunda-platform/templates/optimize/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: optimize
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8090
      protocol: TCP
    - port: 8092
      name: management
      targetPort: 8092
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: optimize
---
# Source: camunda-platform/templates/tasklist/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: tasklist
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: tasklist
---
# Source: camunda-platform/templates/web-modeler/service-restapi.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-web-modeler-restapi
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: restapi
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8081
      protocol: TCP
    - port: 8091
      name: http-management
      targetPort: 8091
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: restapi
---
# Source: camunda-platform/templates/web-modeler/service-webapp.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-web-modeler-webapp
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: webapp
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8070
      protocol: TCP
    - port: 8071
      name: http-management
      targetPort: 8071
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: webapp
---
# Source: camunda-platform/templates/web-modeler/service-websockets.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-web-modeler-websockets
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: websockets
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8060
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: websockets
---
# Source: camunda-platform/templates/zeebe-gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dev-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: zeebe-gateway
  annotations:
spec:
  type: ClusterIP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: zeebe-gateway
  ports:
    - port: 9600
      protocol: TCP
      name: http
    - port: 26500
      protocol: TCP
      name: gateway
---
# Source: camunda-platform/templates/zeebe/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "dev-zeebe"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: zeebe-broker
  annotations:
    {}
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
    - port: 9600
      protocol: TCP
      name: http
    - port: 26502
      protocol: TCP
      name: internal
    - port: 26501
      protocol: TCP
      name: command
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: zeebe-broker
---
# Source: camunda-platform/charts/identity/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: identity
      app.kubernetes.io/instance: dev
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: identity
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: identity
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: identity-8.3.2
        app.kubernetes.io/version: "8.3.2"
        app.kubernetes.io/component: identity
      annotations:
        checksum/configmap-env-vars: b9f9c15f9b682cfc42330e25620936860958fd100225f1ce291d8e05f7c63b59
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: identity
          image: "camunda/identity:8.3.2"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1005
          env:
            - name: IDENTITY_URL
              value: "https://identity.local.distro.ultrawombat.com"
            - name: KEYCLOAK_INIT_OPERATE_SECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-operate-identity-secret"
                  key: operate-secret
            - name: KEYCLOAK_INIT_OPERATE_ROOT_URL
              value: "https://operate.local.distro.ultrawombat.com"
            - name: KEYCLOAK_INIT_CONSOLE_SECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-console-identity-secret"
                  key: console-secret
            - name: KEYCLOAK_INIT_CONSOLE_ROOT_URL
              value: "http://localhost:8080"
            - name: KEYCLOAK_INIT_TASKLIST_SECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-tasklist-identity-secret"
                  key: tasklist-secret
            - name: KEYCLOAK_INIT_TASKLIST_ROOT_URL
              value: "https://tasklist.local.distro.ultrawombat.com"
            - name: KEYCLOAK_INIT_OPTIMIZE_SECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-optimize-identity-secret"
                  key: optimize-secret
            - name: KEYCLOAK_INIT_OPTIMIZE_ROOT_URL
              value: "https://optimize.local.distro.ultrawombat.com"
            - name: KEYCLOAK_INIT_WEBMODELER_ROOT_URL
              value: "https://modeler.local.distro.ultrawombat.com"
            - name: KEYCLOAK_INIT_ZEEBE_NAME
              value: "Zeebe"
            # TODO: Use ".Values.connectors.inbound.mode=oauth" as a condition when we migrate
            # to flat chart structure. Also then remove the optional flag from the secret.
            - name: KEYCLOAK_CLIENTS_0_NAME
              value: Connectors
            - name: KEYCLOAK_CLIENTS_0_ID
              value: connectors
            - name: KEYCLOAK_CLIENTS_0_SECRET
              valueFrom:
                secretKeyRef:
                  key: connectors-secret
                  name: "dev-connectors-identity-secret"
            - name: KEYCLOAK_CLIENTS_0_ROOT_URL
              value: http://placeholder
            - name: KEYCLOAK_CLIENTS_0_REDIRECT_URIS_0
              value: /
            - name: KEYCLOAK_CLIENTS_0_PERMISSIONS_0_RESOURCE_SERVER_ID
              value: operate-api
            - name: KEYCLOAK_CLIENTS_0_PERMISSIONS_0_DEFINITION
              value: "read:*"
            - name: KEYCLOAK_CLIENTS_1_NAME
              value: "Zeebe"
            - name: KEYCLOAK_CLIENTS_1_ID
              value: "zeebe"
            - name: KEYCLOAK_CLIENTS_1_SECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-zeebe-identity-secret"
                  key: zeebe-secret
            - name: KEYCLOAK_CLIENTS_1_TYPE
              value: "M2M"
            - name: KEYCLOAK_CLIENTS_1_PERMISSIONS_0_RESOURCE_SERVER_ID
              value: "zeebe-api"
            - name: KEYCLOAK_CLIENTS_1_PERMISSIONS_0_DEFINITION
              value: "write:*"
            - name: SERVER_PORT
              value: "8080"
            - name: KEYCLOAK_URL
              value: "http://dev-keycloak:80/auth"
            - name: IDENTITY_AUTH_PROVIDER_ISSUER_URL
              value: "https://keycloak.local.distro.ultrawombat.com/auth/realms/camunda-platform"
            - name: IDENTITY_AUTH_PROVIDER_BACKEND_URL
              value: "http://dev-keycloak:80/auth/realms/camunda-platform"
            - name: KEYCLOAK_SETUP_USER
              value: "admin"
            - name: KEYCLOAK_SETUP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-keycloak
                  key: admin-password
            - name: KEYCLOAK_USERS_0_USERNAME
              value: "zalan"
            - name: KEYCLOAK_USERS_0_PASSWORD
              value: "zalan"
            - name: KEYCLOAK_USERS_0_EMAIL
              value: "zalan.szakolci@camunda.com"
            - name: KEYCLOAK_USERS_0_FIRST_NAME
              value: "Zalan"
            - name: KEYCLOAK_USERS_0_LAST_NAME
              value: "Szakolci"
            - name: KEYCLOAK_USERS_0_ROLES_0
              value: "Identity"
            - name: KEYCLOAK_USERS_0_ROLES_1
              value: "Operate"
            - name: KEYCLOAK_USERS_0_ROLES_2
              value: "Tasklist"
            - name: KEYCLOAK_USERS_0_ROLES_3
              value: "Optimize"
            - name: KEYCLOAK_USERS_0_ROLES_4
              value: "Web Modeler"
            - name: IDENTITY_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-identity-postgresql
                  key: password
          envFrom:
            - configMapRef:
                name: dev-identity-env-vars
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 600m
              memory: 400Mi
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8082
              name: metrics
              protocol: TCP
          readinessProbe:
            httpGet:
              # NOTE: Identity doesn't support contextPath for health endpoints.
              path: /actuator/health
              scheme: HTTP
              port: metrics
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /tmp
              name: tmp

      volumes:
        - name: tmp
          emptyDir: {}
      securityContext:
        fsGroup: 1005
---
# Source: camunda-platform/templates/connectors/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-connectors
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: connectors
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: dev
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: connectors
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-8.3.2
        app.kubernetes.io/version: "8.3.2"
        app.kubernetes.io/component: connectors
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: connectors
          image: camunda/connectors-bundle:8.3.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1003
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          env:
            - name: SERVER_PORT
              value: "8080"
            - name: CAMUNDA_OPERATE_CLIENT_KEYCLOAK-TOKEN-URL
              value: "http://dev-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
            - name: CAMUNDA_OPERATE_CLIENT_CLIENT-ID
              value: connectors
            - name: CAMUNDA_OPERATE_CLIENT_CLIENT-SECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-connectors-identity-secret"
                  key: connectors-secret
            - name: CAMUNDA_OPERATE_CLIENT_URL
              value: "http://dev-operate:80"
            - name: ZEEBE_CLIENT_BROKER_GATEWAY-ADDRESS
              value: "dev-zeebe-gateway:26500"
            - name: ZEEBE_CLIENT_SECURITY_PLAINTEXT
              value: "true"
            - name: ZEEBE_CLIENT_ID
              value: zeebe
            - name: ZEEBE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-zeebe-identity-secret"
                  key: zeebe-secret
            - name: ZEEBE_AUTHORIZATION_SERVER_URL
              value: "http://dev-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
            - name: ZEEBE_TOKEN_AUDIENCE
              value: zeebe-api
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 1Gi
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /tmp
              name: tmp
      volumes:
        - name: tmp
          emptyDir: {}
      securityContext:
        fsGroup: 1003
---
# Source: camunda-platform/templates/operate/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: operate
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: dev
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: operate
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-8.3.2
        app.kubernetes.io/version: "8.3.2"
        app.kubernetes.io/component: operate
      annotations:
        checksum/config: f80b1f011116b5753cc7de857347119ded98689f2458c187a9bec52c45d61bc0
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: operate
          image: camunda/operate:8.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsUser: 1004
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "identity-auth"
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI
              value: "http://dev-keycloak:80/auth/realms/camunda-platform"
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWKSETURI
              value: "http://dev-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
            - name: CAMUNDA_OPERATE_IDENTITY_BASEURL
              value: "http://dev-identity:80"
            - name: CAMUNDA_OPERATE_IDENTITY_ISSUER_URL
              value: "https://keycloak.local.distro.ultrawombat.com/auth/realms/camunda-platform"
            - name: CAMUNDA_OPERATE_IDENTITY_ISSUER_BACKEND_URL
              value: "http://dev-keycloak:80/auth/realms/camunda-platform"
            - name: CAMUNDA_OPERATE_IDENTITY_CLIENT_ID
              value: "operate"
            - name: CAMUNDA_OPERATE_IDENTITY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-operate-identity-secret"
                  key: operate-secret
            - name: CAMUNDA_OPERATE_IDENTITY_AUDIENCE
              value: "operate-api"
            - name: CAMUNDA_OPERATE_IDENTITY_REDIRECT_ROOT_URL
              value: "https://operate.local.distro.ultrawombat.com"
            - name: ZEEBE_CLIENT_ID
              value: zeebe
            - name: ZEEBE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-zeebe-identity-secret"
                  key: zeebe-secret
            - name: ZEEBE_AUTHORIZATION_SERVER_URL
              value: "http://dev-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
            - name: ZEEBE_TOKEN_AUDIENCE
              value: zeebe-api
            - name: CAMUNDA_OPERATE_MULTITENANCY_ENABLED
              value: "true"
            - name: ZEEBE_CLIENT_CONFIG_PATH
              value: /tmp/zeebe_auth_cache
            - name: JAVA_TOOL_OPTIONS
              value: -XX:+ExitOnOutOfMemoryError -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000
          resources:
            limits:
              cpu: 8
              memory: 12Gi
            requests:
              cpu: 600m
              memory: 400Mi
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              scheme: HTTP
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /usr/local/operate/config/application.yml
              subPath: application.yml
            - name: tmp
              mountPath: /tmp
            - name: camunda
              mountPath: /camunda
      volumes:
        - name: config
          configMap:
            name: dev-operate
            defaultMode: 484
        - name: tmp
          emptyDir: {}
        - name: camunda
          emptyDir: {}
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
---
# Source: camunda-platform/templates/optimize/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: optimize
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: dev
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: optimize
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-8.3.2
        app.kubernetes.io/version: "8.3.2"
        app.kubernetes.io/component: optimize
    spec:
      imagePullSecrets:
        []
      initContainers:
        - name: migration
          image: camunda/optimize:8.3.2
          command: ['./upgrade/upgrade.sh', '--skip-warning']
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsUser: 100
          env:
            - name: CAMUNDA_OPTIMIZE_ZEEBE_ENABLED
              value: "true"
            - name: CAMUNDA_OPTIMIZE_ZEEBE_PARTITION_COUNT
              value: "3"
            - name: OPTIMIZE_ELASTICSEARCH_HOST
              value: "dev-elasticsearch"
            - name: OPTIMIZE_ELASTICSEARCH_HTTP_PORT
              value: "9200"
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /camunda
              name: camunda
      containers:
        - name: optimize
          image: camunda/optimize:8.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsUser: 100
          env:
            - name: CAMUNDA_OPTIMIZE_ZEEBE_ENABLED
              value: "true"
            - name: CAMUNDA_OPTIMIZE_ZEEBE_PARTITION_COUNT
              value: "3"
            - name: OPTIMIZE_ELASTICSEARCH_HOST
              value: "dev-elasticsearch"
            - name: OPTIMIZE_ELASTICSEARCH_HTTP_PORT
              value: "9200"
            - name: SPRING_PROFILES_ACTIVE
              value: "ccsm"
            - name: CAMUNDA_OPTIMIZE_IDENTITY_ISSUER_URL
              value: "https://keycloak.local.distro.ultrawombat.com/auth/realms/camunda-platform"
            - name: CAMUNDA_OPTIMIZE_IDENTITY_ISSUER_BACKEND_URL
              value: "http://dev-keycloak:80/auth/realms/camunda-platform"
            - name: CAMUNDA_OPTIMIZE_IDENTITY_REDIRECT_ROOT_URL
              value: "https://optimize.local.distro.ultrawombat.com"
            - name: CAMUNDA_OPTIMIZE_IDENTITY_CLIENTID
              value: "optimize"
            - name: CAMUNDA_OPTIMIZE_IDENTITY_CLIENTSECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-optimize-identity-secret"
                  key: optimize-secret
            - name: CAMUNDA_OPTIMIZE_IDENTITY_AUDIENCE
              value: "optimize-api"
            - name: CAMUNDA_OPTIMIZE_IDENTITY_BASE_URL
              value: "http://dev-identity:80"
            - name: CAMUNDA_OPTIMIZE_API_AUDIENCE
              value: "optimize-api"
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI
              value: "http://dev-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
            - name: CAMUNDA_OPTIMIZE_SECURITY_AUTH_COOKIE_SAME_SITE_ENABLED
              value: "false"
            - name: CAMUNDA_OPTIMIZE_MULTITENANCY_ENABLED
              value: "true"
            - name: CAMUNDA_OPTIMIZE_CACHES_CLOUD_TENANT_AUTHORIZATIONS_MAX_SIZE
              value: "10000"
            - name: CAMUNDA_OPTIMIZE_CACHES_CLOUD_TENANT_AUTHORIZATIONS_MIN_FETCH_INTERVAL_SECONDS
              value: "600000"
          resources:
            limits:
              cpu: 8
              memory: 12Gi
            requests:
              cpu: 600m
              memory: 1Gi
          ports:
            - containerPort: 8090
              name: http
              protocol: TCP
            - containerPort: 8092
              name: management
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/readyz
              scheme: HTTP
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /camunda
              name: camunda
      volumes:
        - name: tmp
          emptyDir: {}
        - name: camunda
          emptyDir: {}
      securityContext:
        fsGroup: 100
        runAsNonRoot: true
---
# Source: camunda-platform/templates/tasklist/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: tasklist
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: dev
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: tasklist
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-8.3.2
        app.kubernetes.io/version: "8.3.2"
        app.kubernetes.io/component: tasklist
      annotations:
        checksum/config: 8a8c0bb02afa1201e137915596c65277822b38f7d93e9230d18b6550b19f48d1
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: tasklist
          image: camunda/tasklist:8.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsUser: 1002
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "identity-auth"
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI
              value: "http://dev-keycloak:80/auth/realms/camunda-platform"
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWKSETURI
              value: "http://dev-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
            - name: CAMUNDA_TASKLIST_IDENTITY_BASEURL
              value: "http://dev-identity:80"
            - name: CAMUNDA_TASKLIST_IDENTITY_ISSUER_URL
              value: "https://keycloak.local.distro.ultrawombat.com/auth/realms/camunda-platform"
            - name: CAMUNDA_TASKLIST_IDENTITY_ISSUER_BACKEND_URL
              value: "http://dev-keycloak:80/auth/realms/camunda-platform"
            - name: CAMUNDA_TASKLIST_IDENTITY_CLIENT_ID
              value: "tasklist"
            - name: CAMUNDA_TASKLIST_IDENTITY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-tasklist-identity-secret"
                  key: tasklist-secret
            - name: CAMUNDA_TASKLIST_IDENTITY_AUDIENCE
              value: "tasklist-api"
            - name: CAMUNDA_TASKLIST_IDENTITY_REDIRECT_ROOT_URL
              value: "https://tasklist.local.distro.ultrawombat.com"
            - name: ZEEBE_CLIENT_ID
              value: zeebe
            - name: ZEEBE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "dev-zeebe-identity-secret"
                  key: zeebe-secret
            - name: ZEEBE_AUTHORIZATION_SERVER_URL
              value: "http://dev-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
            - name: ZEEBE_TOKEN_AUDIENCE
              value: zeebe-api
            - name: CAMUNDA_TASKLIST_MULTITENANCY_ENABLED
              value: "true"
            - name: GRAPHQL_PLAYGROUND_ENABLED
              value: "true"
            - name: GRAPHQL_PLAYGROUND_SETTINGS_REQUEST_CREDENTIALS
              value: "include"
            - name: HOME
              value: /parent
            - name: ZEEBE_CLIENT_CONFIG_PATH
              value: /tmp/zeebe_auth_cache
            - name: JAVA_TOOL_OPTIONS
              value: -XX:+ExitOnOutOfMemoryError -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000
          resources:
            limits:
              cpu: 8
              memory: 12Gi
            requests:
              cpu: 400m
              memory: 1Gi
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              scheme: HTTP
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /app/resources/application.yml
              subPath: application.yml
            - mountPath: /tmp
              name: tmp
            - mountPath: /camunda
              name: camunda
      volumes:
        - name: config
          configMap:
            name: dev-tasklist
            defaultMode: 484
        - name: tmp
          emptyDir: {}
        - name: camunda
          emptyDir: {}
      securityContext:
        fsGroup: 1002
        runAsNonRoot: true
---
# Source: camunda-platform/templates/web-modeler/deployment-restapi.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-web-modeler-restapi
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: restapi
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: web-modeler
      app.kubernetes.io/instance: dev
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: restapi
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: web-modeler
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-8.3.2
        app.kubernetes.io/version: "8.3.1"
        app.kubernetes.io/component: restapi
    spec:
      imagePullSecrets:
        - name: dev-c8-registry
      initContainers:
        []
      containers:
        - name: web-modeler-restapi
          image: "registry.camunda.cloud/web-modeler-ee/modeler-restapi:8.3.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          env:
            - name: JAVA_OPTIONS
              value: "-Xmx1536m"
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://dev-postgresql-web-modeler:5432/web-modeler"
            - name: SPRING_DATASOURCE_USERNAME
              value: "web-modeler"
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-postgresql-web-modeler
                  key: password
            - name: RESTAPI_MAIL_HOST
              value: "fakehost"
            - name: RESTAPI_MAIL_PORT
              value: "587"
            - name: RESTAPI_MAIL_USER
              value: "fakeuser"
            - name: RESTAPI_MAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-web-modeler-restapi
                  key: smtp-password
            - name: RESTAPI_MAIL_ENABLE_TLS
              value: "true"
            - name: RESTAPI_MAIL_FROM_ADDRESS
              value: "fake@fake.com"
            - name: RESTAPI_MAIL_FROM_NAME
              value: "Camunda 8"
            - name: RESTAPI_SERVER_URL
              value: "https://modeler.local.distro.ultrawombat.com"
            - name: RESTAPI_PUSHER_HOST
              value: "dev-web-modeler-websockets"
            - name: RESTAPI_PUSHER_PORT
              value: "80"
            - name: RESTAPI_PUSHER_APP_ID
              valueFrom:
                configMapKeyRef:
                  name: dev-web-modeler
                  key: pusher-app-id
            - name: RESTAPI_PUSHER_KEY
              valueFrom:
                configMapKeyRef:
                  name: dev-web-modeler
                  key: pusher-app-key
            - name: RESTAPI_PUSHER_SECRET
              valueFrom:
                secretKeyRef:
                  name: dev-web-modeler
                  key: pusher-app-secret
            - name: RESTAPI_OAUTH2_TOKEN_ISSUER
              value: "https://keycloak.local.distro.ultrawombat.com/auth/realms/camunda-platform"
            - name: RESTAPI_OAUTH2_TOKEN_ISSUER_BACKEND_URL
              value: "http://dev-keycloak:80/auth/realms/camunda-platform"
            - name: RESTAPI_IDENTITY_BASE_URL
              value: "http://dev-identity:80"
            - name: ZEEBE_CLIENT_CONFIG_PATH
              value: /tmp/zeebe_client_cache.txt
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          ports:
            - containerPort: 8081
              name: http
              protocol: TCP
            - containerPort: 8091
              name: http-management
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: http-management
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
---
# Source: camunda-platform/templates/web-modeler/deployment-webapp.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-web-modeler-webapp
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: webapp
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: web-modeler
      app.kubernetes.io/instance: dev
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: webapp
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: web-modeler
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-8.3.2
        app.kubernetes.io/version: "8.3.1"
        app.kubernetes.io/component: webapp
    spec:
      imagePullSecrets:
        - name: dev-c8-registry
      initContainers:
        []
      containers:
        - name: web-modeler-webapp
          image: "registry.camunda.cloud/web-modeler-ee/modeler-webapp:8.3.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          env:
            - name: NODE_ENV
              value: "production"
            - name: NODE_OPTIONS
              value: "--max-old-space-size=128"
            - name: HTTP_WORKERS
              value: "2"
            - name: RESTAPI_HOST
              value: "dev-web-modeler-restapi"
            - name: RESTAPI_PORT
              value: "80"
            - name: RESTAPI_MANAGEMENT_PORT
              value: "8091"
            - name: SERVER_URL
              value: "https://modeler.local.distro.ultrawombat.com"
            - name: SERVER_HTTPS_ONLY
              value: "true"
            - name: OAUTH2_CLIENT_ID
              value: "web-modeler"
            - name: OAUTH2_TOKEN_AUDIENCE
              value: "web-modeler"
            - name: OAUTH2_TOKEN_ISSUER
              value: "https://keycloak.local.distro.ultrawombat.com/auth/realms/camunda-platform"
            - name: KEYCLOAK_BASE_URL
              value: "https://keycloak.local.distro.ultrawombat.com"
            - name: KEYCLOAK_CONTEXT_PATH
              value: "/auth"
            - name: KEYCLOAK_REALM
              value: "camunda-platform"
            - name: KEYCLOAK_JWKS_URL
              value: "http://dev-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
            - name: PUSHER_HOST
              value: "dev-web-modeler-websockets"
            - name: PUSHER_PORT
              value: "80"
            - name: PUSHER_APP_ID
              valueFrom:
                configMapKeyRef:
                  name: dev-web-modeler
                  key: pusher-app-id
            - name: PUSHER_KEY
              valueFrom:
                configMapKeyRef:
                  name: dev-web-modeler
                  key: pusher-app-key
            - name: PUSHER_SECRET
              valueFrom:
                secretKeyRef:
                  name: dev-web-modeler
                  key: pusher-app-secret
            - name: CLIENT_PUSHER_HOST
              value: "modeler-ws.local.distro.ultrawombat.com"
            - name: CLIENT_PUSHER_PORT
              value: "443"
            - name: CLIENT_PUSHER_FORCE_TLS
              value: "true"
            - name: CLIENT_PUSHER_KEY
              valueFrom:
                configMapKeyRef:
                  name: dev-web-modeler
                  key: pusher-app-key
            - name: IDENTITY_BASE_URL
              value: "http://dev-identity:80"
          resources:
            limits:
              cpu: 1000m
              memory: 12Gi
            requests:
              cpu: 500m
              memory: 512Mi
          ports:
            - containerPort: 8070
              name: http
              protocol: TCP
            - containerPort: 8071
              name: http-management
              protocol: TCP
          readinessProbe:
            httpGet:
              # NOTE: WebApp doesn't support contextPath for health endpoints.
              path: /health/readiness
              port: http-management
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
---
# Source: camunda-platform/templates/web-modeler/deployment-websockets.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-web-modeler-websockets
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: websockets
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: web-modeler
      app.kubernetes.io/instance: dev
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: websockets
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: web-modeler
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-8.3.2
        app.kubernetes.io/version: "8.3.1"
        app.kubernetes.io/component: websockets
    spec:
      imagePullSecrets:
        - name: dev-c8-registry
      initContainers:
        []
      containers:
        - name: web-modeler-websockets
          image: "registry.camunda.cloud/web-modeler-ee/modeler-websockets:8.3.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          env:
            - name: APP_NAME
              value: "Web Modeler WebSockets"
            - name: PUSHER_APP_ID
              valueFrom:
                configMapKeyRef:
                  name: dev-web-modeler
                  key: pusher-app-id
            - name: PUSHER_APP_KEY
              valueFrom:
                configMapKeyRef:
                  name: dev-web-modeler
                  key: pusher-app-key
            - name: PUSHER_APP_SECRET
              valueFrom:
                secretKeyRef:
                  name: dev-web-modeler
                  key: pusher-app-secret
            - name: PUSHER_APP_CLUSTER
              value: "web-modeler"
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
          ports:
            - containerPort: 8060
              name: http
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
---
# Source: camunda-platform/templates/zeebe-gateway/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: zeebe-gateway
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: dev
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: zeebe-gateway
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-8.3.2
        app.kubernetes.io/version: "8.3.2"
        app.kubernetes.io/component: zeebe-gateway
      annotations:
        {}
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: zeebe-gateway
          image: camunda/zeebe:8.3.2
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9600
              name: http
            - containerPort: 26500
              name: gateway
            - containerPort: 26502
              name: internal
          env:
            - name: ZEEBE_STANDALONE_GATEWAY
              value: "true"
            - name: ZEEBE_GATEWAY_CLUSTER_CLUSTERNAME
              value: dev-zeebe
            - name: ZEEBE_GATEWAY_CLUSTER_MEMBERID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ZEEBE_LOG_LEVEL
              value: "info"
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+ExitOnOutOfMemoryError"
            - name: ZEEBE_GATEWAY_CLUSTER_CONTACTPOINT
              value: dev-zeebe:26502
            - name: ZEEBE_GATEWAY_NETWORK_HOST
              value: 0.0.0.0
            - name: ZEEBE_GATEWAY_NETWORK_PORT
              value: "26500"
            - name: ZEEBE_GATEWAY_CLUSTER_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: ZEEBE_GATEWAY_CLUSTER_PORT
              value: "26502"
            - name: ZEEBE_GATEWAY_MONITORING_HOST
              value: 0.0.0.0
            - name: ZEEBE_GATEWAY_MONITORING_PORT
              value: "9600"
            - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_IDENTITY_TYPE
              value: "keycloak"
            - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_MODE
              value: "identity"
            - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_IDENTITY_ISSUERBACKENDURL
              value: "http://dev-keycloak:80/auth/realms/camunda-platform"
            - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_IDENTITY_AUDIENCE
              value: "zeebe-api"
            - name: ZEEBE_GATEWAY_MULTITENANCY_ENABLED
              value: "true"
            - name: ZEEBE_BROKER_GATEWAY_MULTITENANCY_ENABLED
              value: "true"
            - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_IDENTITY_BASEURL
              value: "http://dev-identity:80"
            - name: ZEEBE_BROKER_GATEWAY_SECURITY_AUTHENTICATION_IDENTITY_BASEURL
              value: "http://dev-identity:80"
            - name: JAVA_TOOL_OPTIONS
              value: -XX:+ExitOnOutOfMemoryError -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000
          volumeMounts:
            - mountPath: /tmp
              name: tmp
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              scheme: HTTP
              port: 9600
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 400m
              memory: 450Mi
            requests:
              cpu: 400m
              memory: 450Mi
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: dev-zeebe-gateway
            defaultMode: 484
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
  # yamllint disable
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - zeebe-gateway
            topologyKey: kubernetes.io/hostname
  # yamllint enable
---
# Source: camunda-platform/charts/elasticsearch/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dev-elasticsearch-master
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.11.0
    helm.sh/chart: elasticsearch-19.13.9
    app.kubernetes.io/component: master
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: master
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/instance: dev
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  serviceName: dev-elasticsearch-master-hl
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/version: 8.11.0
        helm.sh/chart: elasticsearch-19.13.9
        app.kubernetes.io/component: master
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: master
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/os-shell:11-debian-11-r90
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:8.8.2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "no"
            - name: ELASTICSEARCH_NODE_ROLES
              value: "master"
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "elastic"
            
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "1024m"
            - name: ELASTICSEARCH_ENABLE_REST_TLS
              value: "false"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: rest-api
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 2Gi
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
            - mountPath: /tmp
              name: tmp
            - mountPath: /usr/share/elasticsearch/logs
              name: logs
            - mountPath: /usr/share/elasticsearch/config
              name: config
      volumes:
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: logs
        - emptyDir: {}
          name: config
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "64Gi"
---
# Source: camunda-platform/charts/identity/charts/keycloak/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dev-postgresql
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.9
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: dev-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: dev
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: dev-postgresql
      labels:
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.12.9
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: dev
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.5.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "bn_keycloak"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "bitnami_keycloak"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
            - mountPath: /tmp
              name: tmp
            - mountPath: /opt/bitnami/postgresql/conf
              name: config
            - mountPath: /opt/bitnami/postgresql/tmp
              name: postgresql-tmp
      volumes:
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: config
        - emptyDir: {}
          name: postgresql-tmp
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dev-keycloak
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 22.0.3
    helm.sh/chart: keycloak-16.1.7
    app.kubernetes.io/component: keycloak
spec:
  replicas: 1
  podManagementPolicy: Parallel
  serviceName: dev-keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: dev
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/component: keycloak
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: de87c5bc54632a993a4cd22e9ed438379886ae5dbff70f6a24add1114d704007
        checksum/secrets: 55919b8b3e4a9bf584e096d904242fe9774967a553dd3f273e6c9ed6cfd68d6d
      labels:
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/version: 22.0.3
        helm.sh/chart: keycloak-16.1.7
        app.kubernetes.io/component: keycloak
    spec:
      serviceAccountName: dev-keycloak
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: dev
                    app.kubernetes.io/name: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      enableServiceLinks: true
      initContainers:
        - command:
          - sh
          - -c
          - cp -a /app/keycloak-theme/* /mnt
          image: 'camunda/identity:8.3.2'
          imagePullPolicy: 'IfNotPresent'
          name: copy-camunda-theme
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1005
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
          - mountPath: /mnt
            name: camunda-theme
        - command:
          - sh
          - -c
          - cp -ar /opt/bitnami/keycloak/conf/* /config && cp -a /opt/bitnami/keycloak/lib/quarkus/*
            /quarkus
          image: bitnami/keycloak:22.0.5
          imagePullPolicy: Always
          name: copy-configs
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
          - mountPath: /config
            name: config
          - mountPath: /quarkus
            name: quarkus
      containers:
        - name: keycloak
          image: docker.io/bitnami/keycloak:22.0.5
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-keycloak
                  key: admin-password
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-postgresql
                  key: password
            - name: KEYCLOAK_HTTP_RELATIVE_PATH
              value: "/auth/"
            - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
              value: "true"
          envFrom:
            - configMapRef:
                name: dev-keycloak-env-vars
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: infinispan
              containerPort: 7800
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /auth/
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /auth/realms/master
              port: http
          volumeMounts:
            - mountPath: /opt/bitnami/keycloak/conf/
              name: config
            - mountPath: /opt/bitnami/keycloak/lib/quarkus
              name: quarkus
            - mountPath: /opt/bitnami/keycloak/themes/identity
              name: camunda-theme
            - mountPath: /tmp
              name: tmp
      volumes:
        - emptyDir: {}
          name: config
        - emptyDir: {}
          name: quarkus
        - emptyDir: {}
          name: tmp
        - emptyDir:
            sizeLimit: 10Mi
          name: camunda-theme
---
# Source: camunda-platform/charts/identity/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dev-identity-postgresql
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: identity-postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: dev-identity-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: dev
      app.kubernetes.io/name: identity-postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: dev-identity-postgresql
      labels:
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: identity-postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.12.10
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: dev
                    app.kubernetes.io/name: identity-postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.5.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "identity"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-identity-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-identity-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "identity"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "identity" -d "dbname=identity" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "identity" -d "dbname=identity" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: camunda-platform/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dev-postgresql-web-modeler
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: postgresql-web-modeler
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "14.5.0"
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: dev-postgresql-web-modeler-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql-web-modeler
      app.kubernetes.io/instance: dev
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: dev-postgresql-web-modeler
      labels:
        app.kubernetes.io/name: postgresql-web-modeler
        helm.sh/chart: postgresql-11.9.13
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "14.5.0"
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: dev
                    app.kubernetes.io/name: postgresql-web-modeler
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.5.0-debian-11-r35
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "web-modeler"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-postgresql-web-modeler
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dev-postgresql-web-modeler
                  key: password
            - name: POSTGRES_DB
              value: "web-modeler"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "web-modeler" -d "dbname=web-modeler" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "web-modeler" -d "dbname=web-modeler" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
            - mountPath: /tmp
              name: tmp
            - mountPath: /opt/bitnami/postgresql/conf
              name: config
            - mountPath: /opt/bitnami/postgresql/tmp
              name: postgresql-tmp
      volumes:
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: config
        - emptyDir: {}
          name: postgresql-tmp
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: camunda-platform/templates/zeebe/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "dev-zeebe"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: zeebe-broker
  annotations:
spec:
  replicas: 3
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: dev
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: zeebe-broker
  serviceName: "dev-zeebe"
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-8.3.2
        app.kubernetes.io/version: "8.3.2"
        app.kubernetes.io/component: zeebe-broker
      annotations:
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: zeebe
          image: camunda/zeebe:8.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsUser: 1000
          env:
            - name: LC_ALL
              value: C.UTF-8
            - name: K8S_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_SERVICE_NAME
              value: "dev-zeebe"
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ZEEBE_BROKER_NETWORK_ADVERTISEDHOST
              value: "$(K8S_NAME).$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc"
            - name: ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS
              value:
                $(K8S_SERVICE_NAME)-0.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
                $(K8S_SERVICE_NAME)-1.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
                $(K8S_SERVICE_NAME)-2.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
            - name: ZEEBE_BROKER_CLUSTER_CLUSTERNAME
              value: dev-zeebe
            - name: ZEEBE_LOG_LEVEL
              value: "debug"
            - name: ZEEBE_BROKER_CLUSTER_PARTITIONSCOUNT
              value: "3"
            - name: ZEEBE_BROKER_CLUSTER_CLUSTERSIZE
              value: "3"
            - name: ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR
              value: "3"
            - name: ZEEBE_BROKER_THREADS_CPUTHREADCOUNT
              value: "3"
            - name: ZEEBE_BROKER_THREADS_IOTHREADCOUNT
              value: "3"
            - name: ZEEBE_BROKER_GATEWAY_ENABLE
              value: "false"
            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME
              value: "io.camunda.zeebe.exporter.ElasticsearchExporter"
            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL
              value: "http://dev-elasticsearch:9200"
            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_INDEX_PREFIX
              value: "zeebe-record"
            - name: ZEEBE_BROKER_NETWORK_COMMANDAPI_PORT
              value: "26501"
            - name: ZEEBE_BROKER_NETWORK_INTERNALAPI_PORT
              value: "26502"
            - name: ZEEBE_BROKER_NETWORK_MONITORINGAPI_PORT
              value: "9600"
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/zeebe/data -XX:ErrorFile=/usr/local/zeebe/data/zeebe_error%p.log -XX:+ExitOnOutOfMemoryError"
            - name: JAVA_TOOL_OPTIONS
              value: -XX:+ExitOnOutOfMemoryError -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000
          ports:
            - containerPort: 9600
              name: http
            - containerPort: 26501
              name: command
            - containerPort: 26502
              name: internal
          readinessProbe:
            httpGet:
              path: /ready
              scheme: HTTP
              port: 9600
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 8
              memory: 12Gi
            requests:
              cpu: 400m
              memory: 1200Mi
          volumeMounts:
            - name: config
              mountPath: /usr/local/bin/startup.sh
              subPath: startup.sh
            - name: data
              mountPath: /usr/local/zeebe/data
            - name: exporters
              mountPath: /exporters
            - mountPath: /tmp
              name: tmp
      volumes:
        - name: config
          configMap:
            name: dev-zeebe
            defaultMode: 492
        - name: exporters
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
# yamllint disable
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - zeebe-broker
            topologyKey: kubernetes.io/hostname
# yamllint enable
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: "4Gi"
---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev-keycloak
  namespace: "camunda"
  labels:
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 22.0.3
    helm.sh/chart: keycloak-16.1.7
    app.kubernetes.io/component: keycloak
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
spec:
  ingressClassName: "nginx"
  rules:
    - host: "keycloak.local.distro.ultrawombat.com"
      http:
        paths:
          - path: /auth/
            pathType: ImplementationSpecific
            backend:
              service:
                name: dev-keycloak
                port:
                  name: http
  tls:
    - hosts:
      - keycloak.local.distro.ultrawombat.com
      secretName: local-distro-ultrawombat
---
# Source: camunda-platform/charts/identity/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
  annotations:
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - host: identity.local.distro.ultrawombat.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dev-identity
                port:
                  number: 80
  tls:
    - hosts:
        - identity.local.distro.ultrawombat.com
      secretName: local-distro-ultrawombat
---
# Source: camunda-platform/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev-camunda-platform
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
  annotations: 
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - host: connector.local.distro.ultrawombat.com
      http:
        paths:
          - backend:
              service:
                name: dev-keycloak
                port:
                  number: 80
            path: /auth
            pathType: Prefix
  tls:
    - hosts:
        - connector.local.distro.ultrawombat.com
      secretName: local-distro-ultrawombat
---
# Source: camunda-platform/templates/operate/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: operate
  annotations:
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - host: operate.local.distro.ultrawombat.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dev-operate
                port:
                  number: 80
  tls:
    - hosts:
        - operate.local.distro.ultrawombat.com
      secretName: local-distro-ultrawombat
---
# Source: camunda-platform/templates/optimize/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: optimize
  annotations:
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - host: optimize.local.distro.ultrawombat.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dev-optimize
                port:
                  number: 80
  tls:
    - hosts:
        - optimize.local.distro.ultrawombat.com
      secretName: local-distro-ultrawombat
---
# Source: camunda-platform/templates/tasklist/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: tasklist
  annotations:
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - host: tasklist.local.distro.ultrawombat.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dev-tasklist
                port:
                  number: 80
  tls:
    - hosts:
        - tasklist.local.distro.ultrawombat.com
      secretName: local-distro-ultrawombat
---
# Source: camunda-platform/templates/web-modeler/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev-web-modeler
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: web-modeler
  annotations:
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - host: modeler.local.distro.ultrawombat.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dev-web-modeler-webapp
                port:
                  number: 80
    - host: modeler-ws.local.distro.ultrawombat.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dev-web-modeler-websockets
                port:
                  number: 80
  tls:
    - hosts:
        - modeler.local.distro.ultrawombat.com
      secretName: local-distro-ultrawombat
    - hosts:
        - modeler-ws.local.distro.ultrawombat.com
      secretName: local-distro-ultrawombat
---
# Source: camunda-platform/templates/zeebe-gateway/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: zeebe-gateway
  annotations:
    ingress.kubernetes.io/ingress.class: nginx
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/backend-protocol: GRPC
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - host: zeebe-gateway.local.distro.ultrawombat.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dev-zeebe-gateway
                port:
                  number: 26500
  tls:
    - hosts:
        - zeebe-gateway.local.distro.ultrawombat.com
      secretName: local-distro-ultrawombat
---
# Source: camunda-platform/templates/service-monitor/connectors-service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dev-camunda-platform-connectors
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    release: metrics
spec:
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/component: connectors
  endpoints:
    - honorLabels: true
      path: /actuator/prometheus
      port: http
      interval: 10s
---
# Source: camunda-platform/templates/service-monitor/identity-service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dev-camunda-platform-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    release: metrics
spec:
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/component: identity
  endpoints:
    - honorLabels: true
      path: /actuator/prometheus
      port: metrics
      interval: 10s
---
# Source: camunda-platform/templates/service-monitor/operate-service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dev-camunda-platform-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    release: metrics
spec:
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/component: operate
  endpoints:
    - honorLabels: true
      path: /actuator/prometheus
      port: http
      interval: 10s
---
# Source: camunda-platform/templates/service-monitor/optimize-service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dev-camunda-platform-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    release: metrics
spec:
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/component: optimize
  endpoints:
    - honorLabels: true
      path: /actuator/prometheus
      port: management
      interval: 10s
---
# Source: camunda-platform/templates/service-monitor/tasklist-service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dev-camunda-platform-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    release: metrics
spec:
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/component: tasklist
  endpoints:
    - honorLabels: true
      path: /actuator/prometheus
      port: http
      interval: 10s
---
# Source: camunda-platform/templates/service-monitor/web-modeler-service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dev-camunda-platform-modeler
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    release: metrics
spec:
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/component: restapi
  endpoints:
    - honorLabels: true
      path: /metrics
      port: http-management
      interval: 10s
---
# Source: camunda-platform/templates/service-monitor/zeebe-gateway-service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dev-camunda-platform-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    release: metrics
spec:
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/component: zeebe-gateway
  endpoints:
    - honorLabels: true
      path: /actuator/prometheus
      port: http
      interval: 10s
---
# Source: camunda-platform/templates/service-monitor/zeebe-service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dev-camunda-platform-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    release: metrics
spec:
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/component: zeebe-broker
  endpoints:
    - honorLabels: true
      path: /actuator/prometheus
      port: http
      interval: 10s
---
# Source: camunda-platform/charts/identity/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "dev-identity-test-connection"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: identity
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['dev-identity:80']
  restartPolicy: Never
---
# Source: camunda-platform/templates/operate/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "dev-operate-test-connection"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.2"
    app.kubernetes.io/component: operate
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['dev-operate:80']
  restartPolicy: Never
---
# Source: camunda-platform/templates/web-modeler/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "dev-web-modeler-test-connection"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.3.2
    app.kubernetes.io/version: "8.3.1"
    app.kubernetes.io/component: web-modeler
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['dev-web-modeler-webapp:80']
  restartPolicy: Never
